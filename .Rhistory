url <- paste0(url0,(i+259))
web <- readLines(url, encoding = "UTF-8")
web1 <- str_c(web, collapse = "\n")
print(nchar(web1))
physicalreview_Letters_web_all[[i]] <- web1
}
for(i in 10121:length(physicalreview_Letters_web_all)){
message(i)
#Sys.sleep(runif(1,1,5))
print(Sys.time())
url0 <- "http://apps.webofknowledge.com/full_record.do?product=UA&search_mode=GeneralSearch&qid=2&SID=8DrmUlqGFw1fmsssw42&excludeEventConfig=ExcludeIfFromFullRecPage&page=1&doc="
url <- paste0(url0,(i+259))
web <- readLines(url, encoding = "UTF-8")
web1 <- str_c(web, collapse = "\n")
print(nchar(web1))
physicalreview_Letters_web_all[[i]] <- web1
}
save.image("D:/WoS_least3/physical reivew letters.RData")
shiny::runApp('Documents/GitHub/Boosted_HP_APP/stockVis')
install.packages('rsconnect')
rsconnect::setAccountInfo(name='chenyang1', token='4398A1D04A6B7DBCD2ED84B8D8D50615', secret='6GIugIjzZ0AKTy0uCi9w0Q8Q2UARokTjPcAgUjRP')
library(rsconnect)
rsconnect::deployApp('path/to/your/app')
library(rsconnect)
rsconnect::deployApp("C:/Users/chenyang/Documents/GitHub/Boosted_HP_APP")
library(rsconnect)
rsconnect::deployApp("C:/Users/chenyang/Documents/GitHub/Boosted_HP_APP")
runApp('Documents/GitHub/Boosted_HP_APP')
runApp('Documents/GitHub/Boosted_HP_APP')
runApp('Documents/GitHub/Boosted_HP_APP')
runApp('Documents/GitHub/Boosted_HP_APP')
runApp('Documents/GitHub/Boosted_HP_APP')
runApp('Documents/GitHub/Boosted_HP_APP')
library(shiny)
ui <- fluidPage(
titlePanel("My Shiny App"),
sidebarLayout(
sidebarPanel(
#h2("Installation"),
p("Shiny is available on CRAN, so you can install it in the usual way from your R console:"),
code('install.packages("shiny")'),
br(),
br(),
p("Change the context for text"),
p("Shiny is available on CRAN, so you can install it in the usual way from your R console:"),
br(),
br(),
img(src = "rstudio.png", height = 70, width = 200),
br(),
"Shiny is a product of ",
span("RStudio", style = "color:blue")
),
mainPanel(
h1("Introducing Shiny"),
p("Shiny is a new package from RStudio that makes it that ",
em("incredibly easy "),
"to build interactive web applications with R."),
br(),
p("For an introduction and live examples, visit the ",
a("Shiny homepage.",
href = "http://shiny.rstudio.com")),
br(),
h2("Features"),
p("- Build useful web applications with only a few lines of code鈥攏o JavaScript required."),
p("- Shiny applications are automatically 'live' in the same way that ",
strong("spreadsheets"),
" are live. Outputs change instantly as users modify inputs, without requiring a reload of the browser.")
)
)
)
# Define server logic ----
server <- function(input, output) {
}
# Run the app ----
shinyApp(ui = ui, server = server)
runApp('Documents/GitHub/Boosted_HP_APP')
runApp('Documents/GitHub/Boosted_HP_APP')
ui <- fluidPage(
titlePanel("My Shiny App"),
sidebarLayout(
sidebarPanel(
#h2("Installation"),
p("Shiny is available on CRAN, so you can install it in the usual way from your R console:"),
code('install.packages("shiny")'),
br(),
br(),
p("Change the context for text"),
p("Shiny is available on CRAN, so you can install it in the usual way from your R console:"),
br(),
br(),
img(src = "rstudio.png", height = 70, width = 200),
br(),
"Shiny is a product of ",
span("RStudio", style = "color:blue")
),
mainPanel(
h1("Introducing Shiny"),
p("Shiny is a new package from RStudio that makes it that ",
em("incredibly easy "),
"to build interactive web applications with R."),
br(),
p("For an introduction and live examples, visit the ",
a("Shiny homepage.",
href = "http://shiny.rstudio.com")),
br(),
h2("Features"),
p("- Build useful web applications with only a few lines of code to JavaScript required."),
p("- Shiny applications are automatically 'live' in the same way that ",
strong("spreadsheets"),
" are live. Outputs change instantly as users modify inputs, without requiring a reload of the browser.")
)
)
)
# Define server logic ----
server <- function(input, output) {
}
# Run the app ----
shinyApp(ui = ui, server = server)
rsconnect::setAccountInfo(name='chenyang1',
token='4398A1D04A6B7DBCD2ED84B8D8D50615',
secret='6GIugIjzZ0AKTy0uCi9w0Q8Q2UARokTjPcAgUjRP')
rsconnect::deployApp("C:/Users/chenyang/Documents/GitHub/Boosted_HP_APP")
rsconnect::setAccountInfo(name='chenyang1',
token='E3A9F9C9287356819250CF83AFB3C3ED',
secret='m9Jp2Y4vNk3VR3w4E/o7TkEkDS9NN0E+I0BBp4B5')
rsconnect::deployApp("C:/Users/chenyang/Documents/GitHub/Boosted_HP_APP")
rsconnect::setAccountInfo(name='chenyang1',
token='6FA21F303D29594658FB65E9F02B4ECD',
secret='K0rIEOAkjw+sW9LzxiJBTDOVq0jKcPPrNHw50x7t')
library(rsconnect)
rsconnect::deployApp("C:/Users/chenyang/Documents/GitHub")
rsconnect::deployApp("C:/Users/chenyang/Documents/GitHub/Boosted_HP_APP")
rsconnect::setAccountInfo(name='chenyang1',
token='6FA21F303D29594658FB65E9F02B4ECD',
secret='K0rIEOAkjw+sW9LzxiJBTDOVq0jKcPPrNHw50x7t')
rsconnect::deployApp("C:/Users/chenyang/Documents/GitHub/Boosted_HP_APP")
rsconnect::deployApp("C:/Users/chenyang/Documents/GitHub/the-last-week-in-2018/shiny/App-01")
rsconnect::deployApp("C:/Users/chenyang/Documents/GitHub/App-02")
load("~/Documents/GitHub/Boosted_HP_APP/new-app/data/IRE.rda")
load("data/IRE.rda")
rm(list = ls())
setwd("~/Documents/GitHub/Boosted_HP_APP/new-app")
load("data/IRE.rda")
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('~/Documents/GitHub/Boosted_HP_APP/uplaod files.R')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(shiny)
library(tseries)
library(expm)
source("BoostedHP.R")
load("data/IRE.rda")
# User interface ----
ui <- fluidPage(
titlePanel("Boosted HP App"),
sidebarLayout(
sidebarPanel(
helpText("Create user friendly app through 'Shiny'."),
p("For more information of the APP, visit the Boosted_HP_App",
a(" Github Repository.",
href = "https://github.com/chenyang45/Boosted_HP_App")),
# --------------- Define UI for data upload app ------------------
h2("Uploading Files"),
# Input: Select a file ----
fileInput("file1", "Choose CSV File",
multiple = FALSE,
accept = c("text/csv",
"text/comma-separated-values,text/plain",
".csv")),
# Horizontal line ----
tags$hr(),
# Input: Checkbox if file has header ----
checkboxInput("header", "Header", TRUE),
# Input: Select separator ----
radioButtons("sep", "Separator",
choices = c(Comma = ",",
Semicolon = ";",
Tab = "\t"),
selected = ","),
# Input: Select quotes ----
radioButtons("quote", "Quote",
choices = c(None = "",
"Double Quote" = '"',
"Single Quote" = "'"),
selected = '"'),
# Horizontal line ----
tags$hr(),
# Input: Select number of rows to display ----
radioButtons("disp", "Display",
choices = c(Head = "head",
All = "all"),
selected = "head"),
),
# Main panel for displaying outputs ----
mainPanel(
# --------------- Define UI for argument in BoostedHP.R ------------------
h2("Argument Options"),
# Output: Data file ----
tableOutput("contents") )
)
)
# Define server logic to read selected file ----
server <- function(input, output) {
output$contents <- renderTable({
# input$file1 will be NULL initially. After the user selects
# and uploads a file, head of that data file by default,
# or all rows if selected, will be shown.
req(input$file1)
# when reading semicolon separated files,
# having a comma separator causes `read.csv` to error
tryCatch(
{
df <- read.csv(input$file1$datapath,
header = input$header,
sep = input$sep,
quote = input$quote)
},
error = function(e) {
# return a safeError if a parsing error occurs
stop(safeError(e))
}
)
if(input$disp == "head") {
return(head(df))
}
else {
return(df)
}
})
}
# Create Shiny app ----
shinyApp(ui, server)
ui <- fluidPage(
titlePanel("Boosted HP App"),
sidebarLayout(
sidebarPanel(
helpText("Create user friendly app through 'Shiny'."),
p("For more information of the APP, visit the Boosted_HP_App",
a(" Github Repository.",
href = "https://github.com/chenyang45/Boosted_HP_App")),
# --------------- Define UI for data upload app ------------------
h2("Uploading Files"),
# Input: Select a file ----
fileInput("file1", "Choose CSV File",
multiple = FALSE,
accept = c("text/csv",
"text/comma-separated-values,text/plain",
".csv")),
# Horizontal line ----
tags$hr(),
# Input: Checkbox if file has header ----
checkboxInput("header", "Header", TRUE),
# Input: Select separator ----
radioButtons("sep", "Separator",
choices = c(Comma = ",",
Semicolon = ";",
Tab = "\t"),
selected = ","),
# Input: Select quotes ----
radioButtons("quote", "Quote",
choices = c(None = "",
"Double Quote" = '"',
"Single Quote" = "'"),
selected = '"'),
# Horizontal line ----
tags$hr(),
# Input: Select number of rows to display ----
radioButtons("disp", "Display",
choices = c(Head = "head",
All = "all"),
selected = "head"),
),
# Main panel for displaying outputs ----
mainPanel(
# --------------- Define UI for argument in BoostedHP.R ------------------
h2("Argument Options"),
# Output: Data file ----
tableOutput("contents") )
)
)
# Define server logic to read selected file ----
server <- function(input, output) {
output$contents <- renderTable({
# input$file1 will be NULL initially. After the user selects
# and uploads a file, head of that data file by default,
# or all rows if selected, will be shown.
req(input$file1)
# when reading semicolon separated files,
# having a comma separator causes `read.csv` to error
tryCatch(
{
df <- read.csv(input$file1$datapath,
header = input$header,
sep = input$sep,
quote = input$quote)
},
error = function(e) {
# return a safeError if a parsing error occurs
stop(safeError(e))
}
)
if(input$disp == "head") {
return(head(df))
}
else {
return(df)
}
})
}
# Create Shiny app ----
shinyApp(ui, server)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('~/Documents/GitHub/Boosted_HP_APP/downlaod files.R')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('~/Documents/GitHub/Boosted_HP_APP')
runApp('~/Documents/GitHub/Boosted_HP_APP')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('~/Documents/GitHub/Boosted_HP_APP/weights.R')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('~/Documents/GitHub/Boosted_HP_APP/weights.R')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('~/Documents/GitHub/Boosted_HP_APP')
runApp('~/Documents/GitHub/Boosted_HP_APP/census-app')
runApp()
library(BoostedHP)
data("IRE") # Ireland Annual GDP example in the paper, which is saved in the package.
lam = 100 # tuning parameter for the annual data
# raw HP filter
bx_HP = BoostedHP(IRE, lambda = lam, iter= FALSE)
# iterated HP until max_iter
bx_max <- BoostedHP(IRE, lambda = lam, iter = TRUE, test_type = "none",Max_Iter = 6)
# by BIC
bx_BIC = BoostedHP(IRE, lambda = lam, iter= TRUE, test_type = "BIC")
# by ADF
bx_ADF = BoostedHP(IRE, lambda = lam, iter= TRUE, test_type = "adf", sig_p = 0.050)
# summarize the outcome
outcome = cbind(IRE, bx_HP$trend, bx_BIC$trend, bx_ADF$trend)
matplot(  outcome, type = "l", ylab = "", lwd = rep(2,4)  )
#------------------------
library(xts)
cycle_IRE <- as.xts(IRE, Sys.Date()+1:36)
bx_adf <- data.frame(trend = bx_ADF$trend,raw_data=bx_ADF$raw_data)
bx_adf <- data.frame(trend = bx_ADF$trend,raw_data=bx_ADF$raw_data)
bx_adf <- as.xts(bx_adf,Sys.Date()+1:36)
plot(bx_adf)
bx_adf <- data.frame(trend = bx_ADF$trend,raw_data=IRE)
bx_adf <- as.xts(bx_adf,Sys.Date()+1:36)
plot(bx_adf)
length(bx_ADF$adf_p_hist)
as.xts(bx_ADF$adf_p_hist, Sys.Date()+1:19)
lines(as.xts(bx_ADF$adf_p_hist, Sys.Date()+1:19), type="h", on=NA,col = "blue")
lines(as.xts(bx_ADF$adf_p_hist,Sys.Date()+1:36), n = 50), on=1, col="blue")
lines(as.xts(bx_ADF$adf_p_hist,Sys.Date()+1:36), n = 50, on=1, col="blue")
# add month end points to the chart
points(sample.xts[endpoints(sample.xts[,"Close"], on = "months"), "Close"],
col="red", pch=17, on=1)
# add legend to panel 1
addLegend("topleft", on=1,
legend.names = c("trend","raw data", "p value histroy"),
lty=c(1, 1), lwd=c(2, 1),
col=c("black", "red" , "blue"))
runApp()
runApp()
data <- IRE
leg <- length(data)
cycle_IRE <- as.xts(IRE, Sys.Date()+1:leg)
bx_adf <- data.frame(trend = bx_ADF$trend,raw_data=IRE)
bx_adf <- as.xts(bx_adf,Sys.Date()+1:leg)
plot(bx_adf)
length(bx_ADF$adf_p_hist)
leg_p <- length(bx_ADF$adf_p_hist)
as.xts(bx_ADF$adf_p_hist, Sys.Date()+1:leg_p)
lines(as.xts(bx_ADF$adf_p_hist, Sys.Date()+1:19), type="h", on=NA,col = "blue")
lines(as.xts(bx_ADF$adf_p_hist, Sys.Date()+1:leg_p), type="h", on=NA,col = "blue")
# add month end points to the chart
points(sample.xts[endpoints(sample.xts[,"Close"], on = "months"), "Close"],
col="red", pch=17, on=1)
# add legend to panel 1
addLegend("topleft", on=1,
legend.names = c("trend","raw data", "p value histroy"),
lty=c(1, 1), lwd=c(2, 1),
col=c("black", "red" , "blue"))
leg <- length(rawdata)
leg_p <- length(bx_ADF$adf_p_hist)
rawdata <- IRE
trend <- bx_ADF$trend
p_history <- bx_ADF$adf_p_hist
leg <- length(rawdata)
leg_p <- length(p_history)
bx <- data.frame(trend = trend,raw_data=rawdata)
bx <- as.xts(bx,Sys.Date()-leg:Sys.Date())
leg <- length(rawdata)
leg_p <- length(p_history)
bx <- data.frame(trend = trend,raw_data=rawdata)
bx <- as.xts(bx, (Sys.Date()-leg + 1) : Sys.Date())
leg <- length(rawdata)
leg_p <- length(p_history)
bx <- data.frame(trend = trend,raw_data=rawdata)
bx <- as.xts(bx, Sys.Date() + 1:leg)
plot(bx)
leg <- length(rawdata)
leg_p <- length(p_history)
bx <- data.frame(trend = trend,raw_data=rawdata)
bx <- as.xts(bx, Sys.Date() + 1:leg)
plot(bx,title("ADF"))
plot(bx,title = "ADF")
leg <- length(rawdata)
leg_p <- length(p_history)
bx <- data.frame(trend = trend,raw_data=rawdata)
bx <- as.xts(bx, Sys.Date() + 1:leg)
plot(bx)
as.xts(bx_ADF$adf_p_hist, Sys.Date()+1:leg_p)
#as.xts(bx_ADF$adf_p_hist, Sys.Date()+1:leg_p)
lines(as.xts(p_history, Sys.Date()+1:leg_p), type="h", on=NA,col = "blue")
# add legend
addLegend("topleft", on=1,
legend.names = c("trend","raw data", "p value histroy"),
lty=c(1, 1), lwd=c(2, 1),
col=c("black", "red" , "blue"))
source("plot_all.R")
source("plot_all.R")
bx_ADF[[4]]
bx_ADF$adf_p_hist
runApp()
runApp()
runApp('app0.R')
runApp('app0.R')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('app01.R')
runApp()
runApp('app01.R')
runApp('app01.R')
runApp('app01.R')
runApp('app01.R')
runApp('app01.R')
runApp('app01.R')
runApp('app01.R')
runApp('app01.R')
